name: FlashStudio CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: flashstudio
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run syntax check
      run: |
        python -m py_compile app.py
        python -m py_compile config.py
        python -c "from app import app; print('‚úÖ App imports successfully')"
        
    - name: Run unit tests
      run: |
        # Create test environment
        export SECRET_KEY="test-secret-key"
        export STRIPE_PUBLISHABLE_KEY="pk_test_example"
        export STRIPE_SECRET_KEY="sk_test_example"
        export ADMIN_USERNAME="admin"
        export ADMIN_PASSWORD="admin"
        
        # Run tests if they exist
        if [ -f "tests/test_payment_flows.py" ]; then
          python -m pytest tests/ -v --tb=short
        else
          echo "‚úÖ No specific tests found, running basic imports"
          python -c "import app, models, config; print('All core modules import successfully')"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r . -x ./venv,./tests -f json -o security-report.json || true
        
    - name: Check for secrets in code
      run: |
        # Check for potential secrets
        echo "üîç Scanning for potential secrets..."
        if grep -r "sk_live_\|pk_live_\|password.*=" . --exclude-dir=venv --exclude-dir=.git || true; then
          echo "‚ö†Ô∏è  Potential secrets detected - review code"
        else
          echo "‚úÖ No obvious secrets found"
        fi

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Test that the image runs successfully
        docker run --rm \
          -e SECRET_KEY="test-key" \
          -e STRIPE_PUBLISHABLE_KEY="pk_test_example" \
          -e STRIPE_SECRET_KEY="sk_test_example" \
          -e ADMIN_USERNAME="admin" \
          -e ADMIN_PASSWORD="admin" \
          --name flashstudio-test \
          -d -p 8080:8000 \
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
          
        # Wait for startup
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/healthz || exit 1
        
        # Cleanup
        docker stop flashstudio-test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:develop"
        # Add your staging deployment commands here
        # For example: kubectl, docker-compose, or cloud provider CLI
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest"
        # Add your production deployment commands here
        # For example:
        # - Update Kubernetes deployment
        # - Deploy to cloud provider
        # - Update docker-compose on server
        
  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "‚úÖ Production deployment successful!"
        elif [ "${{ needs.deploy-staging.result }}" = "success" ]; then
          echo "‚úÖ Staging deployment successful!"
        else
          echo "‚ÑπÔ∏è  Build completed - no deployment triggered"
        fi